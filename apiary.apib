FORMAT: 1A

# Plant Breeding API
The Breeding API specifies a standard interface for plant phenotype/genotype databases to serve 
their data to crop breeding applications. It is a <i>shared</i>, <i>open</i> API, to be
used by all data providers and data consumers who wish to participate. Initiated in May 2014, it is
currently in an actively developing state, so now is the time for potential participants to help
shape the specifications to ensure their needs are addressed. The listserve for discussions and 
announcements is at http://mail2.sgn.cornell.edu/cgi-bin/mailman/listinfo/plant-breeding-api .

### URL structure

API requests are structured as "\<server\>/brapi/v1/", 
where "v1" is the version number of the API, followed by the command.  
Example: /brapi/v1/markerprofiles/2939  

### Structure of the response object:
The return objects are encoded in JSON. 
The response always consists of a "metadata" key that minimally 
contains the pagination information in a "pagination" key and the status information.

The pagination object contains the keys "pageSize", "currentPage", "totalCount", "totalPages".

The status object contains a list of objects with the keys "code" and "message".

The payload data is contained in a key called "result". This should usually contain a list; pagination will happen over items in this list.

Additional documentation is in the [GitHub wiki](https://github.com/plantbreeding/documentation/wiki). 
See especially the [Best Practices and Conventions]
(https://github.com/plantbreeding/documentation/wiki/Best-Practices-and-Conventions).

### API call categories:  
Scope: "CORE", "PHENOTYPING", "GENOTYPING", "OTHER".  
Status: "ACCEPTED", "IN DISCUSSION", "SUGGESTED".

# Group Authentication
This resource refers to the authentication mechanism for the API. It is still implementation-agnostic but the structure
should be similar across all implementations. To start off, we propose to use a call similar to OAuth2.0 password grant type. However, this is not fully secure, as we have to trust third party applications not to do anything nefarious with the password information. Upgrade to full OAuth2.0 in the future.

**HTTPS** should be enforced everywhere.

## Authentication [/brapi/v1/token?grant_type=password&username=USERNAME&password=PASSWORD&client_id=CLIENT_ID ]

###### Response data types
returns a hash with the session name as key and the token as the value. A metadata key is also present (but usually set to null, unless an error conditions occurs).

### Login [POST]
+ Parameters
    + grant_type (optional, text, `password`) ... The grant type, only allowed value is password, but can be ignored
    + username (required, text, `thepoweruser`) ... The username
    + password (required, text, `mylittlesecret`) ... The password
    + client_id (optional, text, `blabla`) ... The client_id, currently ignored.
    
+ Response 201 (application/json)

        {
            "metadata": null,
            "session_token": "R6gKDBRxM4HLj6eGi4u5HkQjYoIBTPfvtZzUD8TUzg4"
        } 


# Group Germplasm
Note: The plural of germplasm is germplasm (no "s").

## Germplasm ID [/brapi/v1/germplasm?name={name}&matchMethod={matchMethod}&include={synonyms}&pageSize={pageSize}&page={page}]
Other service requests use the server's internal `germplasmId`. This service provides the germplasmId.
For the requested name or synonym, returns the internal identifier of that germplasm line.
- If there is none, the empty list is returned.  
- If there is one or more than one match, returns an array of all matching germplasmIds and their text representations.

###### Response data types
|Variable|Datatype|Description|Required|  
|------|------|------|:-----:|
|germplasmId|string|internal DB id |Y|
|breederCode|string|Unique identifier  for germplasm in a breeding program|Y|
|accessionNumber|string|Unique identifier for germplasm within a collection||
|germplasmName|string|Name of the germplasm. It can be the prefered name and does not have to be unique||
|synonyms|array of string|list of synonyms including accession Name||
|germplasmPUI|string|Permanent identifier (e.g. URI, DOI, LSID)||

Scope: CORE.  Status: IN DISCUSSION.
### Germplasm ID by name [GET]
+ Parameters
    + name (required, text, `mor% morex mo* more?`) ... The name or synonym.
    + matchMethod (optional, string, `wildcard`) ... Whether to restrict the search to exact (case insensitive) or wildcard. \ can be used to escape characters.
    matches. Possible values are 'exact', 'wildcard'. Wildcard uses both * or percent sign for any number of character and ? for one character matching. Default is exact. Note: for implementation be aware that security issues (e.g. sql injection) are the responsability of the developer.
    + include (optional, string, `synonyms`) ... Whether to include synonyms in the output.
    + pageSize (optional, integer, `1000`) ... The size of the pages to be returned. Default is `1000`.
    + page (optional, integer, `10`) ... Which result page is requested
+ Response 200 (application/json)

        {    
            "metadata": {
                "pagination": {
                    "pageSize": 1000,
                    "currentPage": 10,
                    "totalCount": 27338,
                    "totalPages": 28
                },
                "status": []
            },
            "result" :  [
                { 
                    "accessionNumber": "MOREX",
                    "synonyms" : [ "M25", "CIHO15773" ],
                    "germplasmPUI" : "",
                    "germplasmName": "Pahang",
                    "breederCode": "01BEL084609",
                    "germplasmId": 382
                },
                {
                    "accessionNumber": "MORGENROT",
                    "synonyms" : [ ],
                    "germplasmPUI" : "",
                    "breederCode": "01BEL084609",
                    "germplasmId": 383
                }
            ]
        }    
        
## Germplasm details [/brapi/v1/germplasm/{id}]
Scope: CORE. Status: IN DISCUSSION.  
###### Response data types
|Variable|Datatype|Description|Required|  
|------|------|------|:-----:|
|germplasmId|string|Internal db identifier|Y|
|breederCode|string|Unique identifier  for germplasm in a breeding program|Y|
|accessionNumber|string|This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection||
|germplasmName|string|Name of the germplasm. It can be the prefered name and does not have to be unique||
|germplasmPedigree|string|Cross name with optional selection history.||
|germplasmSeedSource|string|Seed source||
|trialId|array of string|Trials that this germplasm has been used in||
|synonyms|array of string|List of other germplasm name||
|germplasmPUI|string|Permanent identifier (e.g. URI, DOI, LSID)||
|commonCropName|string|Common name fo the crop (e.g. wheat, rice, maize, cassava, banana)||
|instituteCode|string|Institute that has bred the material. Note: The code may consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. COL001) as recommended by FAO WIEWS |Y|
|instituteName|string|Name of the institute (or person) that bred the material.||
|biologicalStatusOfAccessionCode|string|400) Breeding/research material 410) Breeder's line 411) Synthetic population 412) Hybrid 413) Founder stock/base population 414) Inbred line (parent of hybrid cultivar) 415) Segregating population 416) Clonal selection 420) Genetic stock 421) Mutant (e.g. induced/insertion mutants, tilling populations) 422) Cytogenetic stocks  423) Other genetic stocks (e.g. mapping populations)500) Advanced or improved cultivar (conventional breeding methods) 600) GMO (by genetic engineering) 999) Other||
|countryOfOriginCode|string|3-letter ISO 3166-1 code of the country in which the sample was bred or selected (breeding lines, GMOs, segregating populations, hybrids, modern cultivars, etc.).||
|typeOfGermplasmStorageCode|string|If germplasm is maintained under different types of storage, multiple choices are allowed. 10) Seed collection 11) Short term 12) Medium term 13) Long term 20) Field collection 30) In vitro collection 40) Cryopreserved collection 50) DNA collection 99) Other (elaborate in REMARKS field)||
|genus|string|Genus name for taxon. Initial uppercase letter required.||
|species|string|Specific epithet portion of the scientific name in lowercase letters.||
|speciesAuthority|string|||
|subtaxa|string|Subtaxon can be used to store any additional taxonomic identifier. The following abbreviations are allowed: ‘subsp.’ (for subspecies); ‘convar.’ (for convariety); ‘var.’ (for variety); ‘f.’ (for form); ‘Group’ (for ‘cultivar group’).|
|subtaxaAuthority|string|||
|donors|array of string| code of the donor institute and Identifier assigned to an accession by the donor, and permanent identifier.||
|acquisitionDate|string|Date on which the accession entered the collection where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or ‘00’ [double zero].|

### Germplasm details by id [GET]
+ Parameters
    + id (required, string, `382`) ... the internal id of the germplasm
    
+ Response 200 (application/json)

        {
            "metadata": {
                "status": [],
                "pagination": {
                    "pageSize": 1000,
                    "currentPage": 1,
                    "totalCount": 1,
                    "totalPages": 1
                }
            },
            "result": 
                [
                    {
                        "germplasmId": "01BEL084609",
                        "germplasmPUI": "http://www.crop-diversity.org/mgis/accession/01BEL084609",
                        "germplasmName": "Pahang",
                        "pedigree": "TOBA97/SW90.1057",
                        "germplasmSeedSource": "Female GID:4/Male GID:4",
                        "trailId" : [ ],
                        "accessionNumber": "ITC0609",
                        "breederCode": "01BEL084609",
                        "synonyms": [ ],
                        "commonCropName": "banana",
                        "instituteCode": "01BEL084",
                        "instituteName": "ITC",
                        "biologicalStatusOfAccessionCode": 412,
                        "countryOfOriginCode": "UNK",
                        "typeOfGermplasmStorageCode": 10,
                        "genus": "Musa",
                        "species": "acuminata",
                        "speciesAuthority": "",
                        "subtaxa": "sp malaccensis var pahang",
                        "subtaxaAuthority": "",
                        "donors": 
                        [
                            {
                                "donorAccessionNumber": "",
                                "donorInstituteCode": "",
                                "pui": ""
                            }
                        ],
                        "acquisitionDate": "19470131"
                    }
            ]
        }
## Germplasm Details List [/brapi/v1/germplasm?trialId=123]
Scope: CORE. Status: IN DISCUSSION.  
###### Response data types
|Variable|Datatype|Description|Required|  
|------|------|------|:-----:|
|germplasmId|string|Internal db identifier|Y|
|breederCode|string|Unique identifier  for germplasm in a breeding program|Y|
|trialId|array of string|Trials that this germplasm has been used in||
|accessionNumber|string|This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection||
|germplasmName|string|Name of the germplasm. It can be the prefered name and does not have to be unique||
|Pedigree|string|Cross name with optional selection history.||
|germplasmSeedSource|string|Seed source||
|synonyms|array of string|List of other germplasm name||
|germplasmPUI|string|Permanent identifier (e.g. URI, DOI, LSID)||
|commonCropName|string|Common name fo the crop (e.g. wheat, rice, maize, cassava, banana)||
|instituteCode|string|Institute that has bred the material. Note: The code may consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. COL001) as recommended by FAO WIEWS |Y|
|instituteName|string|Name of the institute (or person) that bred the material.||
|biologicalStatusOfAccessionCode|string|400) Breeding/research material 410) Breeder's line 411) Synthetic population 412) Hybrid 413) Founder stock/base population 414) Inbred line (parent of hybrid cultivar) 415) Segregating population 416) Clonal selection 420) Genetic stock 421) Mutant (e.g. induced/insertion mutants, tilling populations) 422) Cytogenetic stocks  423) Other genetic stocks (e.g. mapping populations)500) Advanced or improved cultivar (conventional breeding methods) 600) GMO (by genetic engineering) 999) Other||
|countryOfOriginCode|string|3-letter ISO 3166-1 code of the country in which the sample was bred or selected (breeding lines, GMOs, segregating populations, hybrids, modern cultivars, etc.).||
|typeOfGermplasmStorageCode|array of string|If germplasm is maintained under different types of storage, multiple choices are allowed. 10) Seed collection 11) Short term 12) Medium term 13) Long term 20) Field collection 30) In vitro collection 40) Cryopreserved collection 50) DNA collection 99) Other (elaborate in REMARKS field)||
|genus|string|Genus name for taxon. Initial uppercase letter required.||
|species|string|Specific epithet portion of the scientific name in lowercase letters.||
|speciesAuthority|string|||
|subtaxa|string|Subtaxon can be used to store any additional taxonomic identifier. The following abbreviations are allowed: ‘subsp.’ (for subspecies); ‘convar.’ (for convariety); ‘var.’ (for variety); ‘f.’ (for form); ‘Group’ (for ‘cultivar group’).|
|subtaxaAuthority|string|||
|donors|array of string| code of the donor institute and Identifier assigned to an accession by the donor, and permanent identifier.||
|acquisitionDate|string|Date on which the accession entered the collection where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or ‘00’ [double zero].|

### Germplasm List by trialId [GET]
+ Parameters
    + trialId (optional, string, `123`) ... the trial database identitifer we want the filter by
    
+ Response 200 (application/json)

        {
            "metadata": {
                "status": [],
                "pagination": {
                    "pageSize": 1000,
                    "currentPage": 1,
                    "totalCount": 1,
                    "totalPages": 1
                }
            },
            "result": [
                {
                    "germplasmId": "01BEL084609",
                    "germplasmPUI": "http://www.crop-diversity.org/mgis/accession/01BEL084609",
                    "germplasmName": "Pahang",
                    "pedigree": "TOBA97/SW90.1057",
                    "germplasmSeedSource": "Female GID:4/Male GID:4",
                    "trailId" : [ ],
                    "accessionNumber": "ITC0609",
                    "breederCode": "01BEL084609",
                    "synonyms": [ ],
                    "commonCropName": "banana",
                    "instituteCode": "01BEL084",
                    "instituteName": "ITC",
                    "biologicalStatusOfAccessionCode": 412,
                    "countryOfOriginCode": "UNK",
                    "typeOfGermplasmStorageCode": 10,
                    "genus": "Musa",
                    "species": "acuminata",
                    "speciesAuthority": "",
                    "subtaxa": "sp malaccensis var pahang",
                    "subtaxaAuthority": "",
                    "donors": 
                    [
                        {
                            "donorAccessionNumber": "",
                            "donorInstituteCode": "",
                            "germplasmPUI": ""
                        }
                    ],
                    "acquisitionDate": "19470131"
                }
            ]
        }

        
## Germplasm pedigree [/brapi/v1/germplasm/{id}/pedigree?notation=purdy]
pedigree: text representation of the pedigree in [Purdy notation]
(http://wheat.pw.usda.gov/ggpages/gopher/administration/Template%20for%20Germplasm%20records.html) or [Lamacraft] (http://link.springer.com/article/10.1007%2FBF00021556).  
Scope: OTHER. Status: IN DISCUSSION.
### Germplasm pedigree by id [GET]
+ Parameters
    + id (required, number, `382`) ... the internal id of the germplasm
    + notation (optional, string, `purdy`) ... text representation of the pedigree
+ Response 200 (application/json)
    
        { 
            "metadata" : null,
            "result" : [ {
                "germplasmId": 382,
                "pedigree" : "Cree / Bonanza",
                "parent1Id" : 166,
                "parent2Id" : 143
            } ]
        }

+ Response 400 (application/json)
    
        { 
            "metadata" : {
                "status" : [
                    {
                        "code" : "ERR-1",
                        "message" : "Unsupported notation code."
                    }
                ]
            },
            "result": []
        }

## Germplasm markerprofiles  [/brapi/v1/germplasm/{id}/markerprofiles]
Retrieve the markerProfileIds for a given Germplasm ID  
Scope: GENOTYPING. Status: IN DISCUSSION.
### Markerprofiles by germplasmId [GET]
+ Response 200 (application/json)
        
        {
            "metadata" : null,
            "result" :  [ {
                germplasmId : 39393,
                markerProfiles : [
                    3939, 4484, 3993
                ]
            } ]
        }

# Group Germplasm attributes
Germplasm "attributes" are simply-inherited characteristics (characterization descriptors) that are not environment-dependent but 
inherent in the germplasm line.  They include genes, QTLs, and genetic "traits" like wheat grain 
hardness.  They are often evaluated by genotyping for diagnostic markers.
## List attributes available [/brapi/v1/attributes?attributeCategoryId=2]
Scope: OTHER. Status: IN DISCUSSION.
### Germplasm attributes [GET] 
List available attributes.
###### Response data types
|Variable|Datatype|Description|Required|  
|------|------|------|:-----:|
|id|integer|internal database identifier, not stable |Y|
|code|string|abbreviation||
|uri|string|reference to external documentation, ontology etc.||
|name|string|for display, and stable identifier unique in the database|Y|
|description|string|||
|datatype|string|e.g. Categorical, Numeric, Boolean||
|values|string|array of all possible values for this attribute|Y|
+ Parameters
    + attributeCategoryId (optional, string, `2`) ... filter for kind of attributes
+ Response 200 (application/json)

        {
            "metadata" : {
                "pagination": {
                    "pageSize": 10,
                    "currentPage": 1,
                    "totalCount": 10000,
                    "totalPages": 1000
                },
                "status": []
            },
            "result" : [            
                {
                    "id": 1,
                    "code": "RHT",
                    "uri": "http://www.cropontology.org/rdf/CO_321:0000020",
                    "name": "Rht-B1b",
                    "description": "Allele of marker 11_4769, diagnostic for allele b of reduced-height gene Rht-B1",
                    "attributeCategoryId": 2,
                    "attributeCategoryName": "Agronomic",
                    "datatype": "Categorical",
                    "values": ["Present", "Absent", "Heterozygous"]
                }
            ]
        }

## List attribute categories [/brapi/v1/attributes/categories/{none}] 
Scope: OTHER. Status: IN DISCUSSION.
### Germplasm attribute categories [GET]
List all available attribute categories.
+ Parameters
    + none 
+ Response 200 (application/json)

        {
            "metadata" : {
                "pagination": {
                    "pageSize": 10,
                    "currentPage": 1,
                    "totalCount": 10,
                    "totalPages": 1
                },
                "status": []
            },
            "result" : [
                {
                    "id": 1, 
                    "name": "Morphological"
                },
                {
                    "id": 2, 
                    "name": "Agronomic"
                }
            ]
        }

## Germplasm attribute values by germplasmId [/brapi/v1/attributes/{germplasmId}?attributeList={attributeId},{attributeId}]
### Germplasm attribute values [GET]
Values for all attributes by default.
+ Parameters
    + germplasmId (required, string, `993`) ... The germplasm characterized
    + attributeId (optional, integer, `1`) ... Restrict the response to only the listed attributes.
+ Response 200 (application/json)

        {
            "metadata" : {
                "pagination": {
                    "pageSize": 10,
                    "currentPage": 1,
                    "totalCount": 10,
                    "totalPages": 1
                },
                "status": []
            },
            "result" : [
                {
                    "germplasmId": "993",
                    "values": [
                        {
                            "attributeId": 1,
                            "attributeName": "Rht-B1b",
                            "attributeCode": "RHT",
                            "value": "Present", 
                            "dateDetermined": "20070528"
                        }
                    ]
                }
            ]
        }


# Group Markerprofiles

For the purposes of this API, the definition of markerprofile is *the allele calls for a specified germplasm line, for all markers, for a specified set of genotyping experiments or all experiments.*

Basic concepts in the **Breeding API**:

- *markerprofile*: A set of marker scores for a specific extract from a specific germplasm.
- *extract* : a preparation from a germplasm for an analysis. 
- *germplasm*: a single genetic entity (cultivar, variety, accession, breeding line) used for analysis
- *marker*: a DNA sequence polymorphism, potentially localized to a single genomic location
- *allele*: one of the two possible states of a marker in each haploid chromosome complement of a specified germplasm, as determined in a specified experiment. A diploid organism has two alleles per marker.
- *missing*: a germplasm/marker/experiment combination for which no allele result is available, whether it was tested for or not

## Markerprofile search [/brapi/v1/markerprofiles?germplasm={germplasmId}&extract={extractId}&method={methodID}]
Scope: GENOTYPING.
Status: IN DISCUSSION.
For the requested Germplasm Id and/or Extract Id, returns the Markerprofile Id and number of non-missing allele calls 
(marker/allele pairs).
[Example] (http://malt.pw.usda.gov/t3/wheatplus/brapi/v1/markerprofiles/993_83/count?analysisMethod=GoldenGate)
### Retrieve Markerprofile Id's [GET]
+ Parameters
    + germplasmId (optional, number, `993`) ... The server's internal id for the Germplasm ID, as returned by the **Find markerprofile by Germplasm** service.
    + extractId (optional, number, `84`) ... The server's internal id for the ExtractId
+ Response 200 (application/json)

        {
            "metadata" : {
                "pagination": {
                    "pageSize": 10,
                    "currentPage": 1,
                    "totalCount": 10,
                    "totalPages": 1
                },
                "status": []
            },
            "result" : [
                {   
                    "markerProfileId": "993",
                    "germplasmId" : 2374,
                    "extractId" : 3939,
                    "analysisMethod": "GoldenGate",
                    "resultCount": 1470
                },
                {
                    "markerProfileId": "994",
                    "germplasmId" : 2374,
                    "extractId" : 3939,
                    "analysisMethod": "GBS",
                    "resultCount": 1470
                }
            ]
        }

## Markerprofile data [/brapi/v1/markerprofiles/{id}?page=&pageSize= ]
Scope: GENOTYPING.
Status: IN DISCUSSION.
For the requested markerprofile ID, returns the allele call for each marker. 
   
**Allele encodings**

- Codominant markers such as SNPs: AA or BB for homozygotes, AB for heterozygotes
- Dominant markers such as DArTs: 1 for present, 0 for absent

**Open issue:**
The pages of data will need to be sorted sensibly in order for the
requested page to be delivered consistently.  By map or genome position?
Alphabetically?
###### Response data types
|Variable|Datatype|Description|Required|  
|------|------|------|:-----:|
|markerprofileId|string|Unique in the database. Can be a catenation of unique IDs for germplasm and extract.|Y|
|germplasmId|integer||Y|
|extractId|integer||Y|
|analysisMethod|string|||
|encoding|string|list of all possible scores|Y|
|data|object|array of marker-name/score pairs|Y|
|pagination|object|pageSize, currentPage, totalCount, totalPages|Y|

### Alleles By Markerprofile Id [GET]
+ Parameters
    + id (required, number, `993`) ... The server's internal id for the germplasm line, as returned by the **Find Germplasm by Name** service.
    + pageSize (optional, number, `10000`) ... The number of allele call results (marker/allele pairs) to be returned in the response. If multiple experiments are requested, some responses will contain the last results from one experiment followed by the first results from the next.
    + page (optional, number, `1`) ... Required if `pageSize` is given; and requires that `pageSize` be given. The first page is 1, not 0.

+ Response 200 (application/json)

        {
            "metadata" : {
                "pagination": {
                    "pageSize": 10,
                    "currentPage": 1,
                    "totalCount": 10,
                    "totalPages": 1
                },
                "status": []
            },
        
            "germplasmId": 993,
            "extractId" : 38383, 
            "markerprofileId": 37484,
            "analysisMethod": "GBS-Pst1",
            "encoding": "AA,BB,AB",
            "data": { "marker1": "AA", "marker2":"AB" }
        }

## Markerprofile data [/brapi/v1/markerprofiles ]
Scope: GENOTYPING.
Status: IN DISCUSSION.

## MarkerProfile Allele Matrix [/brapi/allelematrix?markerprofileId=100&markerprofileId=101]
This uses a more efficient data structure and pagination for large number of markers.

### Scores [GET]

Use GET when paramater size less than 2K

|Variable|Datatype|Description|Required|  
|-----------|------|------|:-----:|
|markerprofileId|string, list|eg: markerprofileId1=100&markerprofileId2=101|required
|pageSize|integer||optional
|currentPage|integer||
|totalCount|integer||
|totalPages|integer||

+ Response 200 (application/json)

        {
            "metadata": {   
                "status":[],
                "pagination": {
                    "pageSize": 100,
                    "currentPage": 1,
                    "totalCount": 1,
                    "totalPages": 1
                }
            },
            "makerprofileIds": ["markerprofileId1","markerprofileId2","markerprofileId3"],
            "scores": { 
                    "markerId1":["AB","AA","AA"],
                    "markerId2":["AA","AB","AA"],
                    "markerId3":["AB","AB","BB"]
            }
        }


### Scores [POST]

Use GET when paramater size greater than 2K

|Variable|Datatype|Description|Required|  
|-----------|------|------|:-----:|
|markerprofileId|string, list|eg: markerprofileId1=100&markerprofileId2=101|required
|pageSize|integer||optional
|currentPage|integer||
|totalCount|integer||
|totalPages|integer||

+ Response 200 (application/json)

        {
            "metadata": {   
                "status": [ ],
                "pagination": {
                    "pageSize": 100,
                    "currentPage": 1,
                    "totalCount": 1,
                    "totalPages": 1
                }
            },
            "makerprofileIds": ["markerprofileId1","markerprofileId2","markerprofileId3"],
            "scores": { 
                    "markerId1":["AB","AA","AA"],
                    "markerId2":["AA","AB","AA"],
                    "markerId3":["AB","AB","BB"]
            }
        }

# Group Study

API to retrieve information about studies (trials, nurseries).

## Crop [/brapi/v1/crops]
Call to retrieve a list of supported crops.

### List Crops [GET]
+ Response 200 (application/json)
        
        { 
            "metadata" : null,
            "result" : [
                "rice", "wheat", "barley", "maize", "cassava"
            ]
        }

## Program [/brapi/v1/programs]
Call to retrieve a list of programs.

### List programs [GET]

+ Response 200 (application/json)
        
        {
            "metadata" : {
                "pagination": {
                    "pageSize": 10,
                    "currentPage": 1,
                    "totalCount": 10,
                    "totalPages": 1
                },
                "status": []
            },
            "result" : [
                {
                    "id": "123",
                    "name": "Rice Improvement Program",
                    "crop": "rice",
                    "objective" : "Disease resistance",
                    "leadPerson" : "Dr. Henry Beachell"
                },
                {
                    "id": "456",
                    "name": "Wheat Improvement Program",
                    "crop": "wheat",
                    "objective" : "Yield improvement",
                    "leadPerson" : "Dr. Norman Borlaug"
                }
            ]
        }

## Study Types [/brapi/v1/studyTypes]

Call to retrieve the list of study types.

### List study types [GET]
+ Response 200 (application/json)
        
        {
             "metadata" : {
                "pagination": {
                    "pageSize": 10,
                    "currentPage": 1,
                    "totalCount": 10,
                    "totalPages": 1
                },
                "status": []
            },
            "result" : [
                {
                    "name": "Nursery",
                    "description": "Description for Nursery study type"
                },
                {
                    "name": "Trial",
                    "description": "Description for Nursery study type"
                }
            ]
        }

## Study Instances [/brapi/v1/study/{studyId}/instances]

Get a list of study instances. 
This information is used to add the `studyInstance` parameter filter in the "get observation units" call.

### List study Instances [GET]

+ Response 200 (application/json)

        {
            "metadata" : {
                "pagination": {
                    "pageSize": 10,
                    "currentPage": 1,
                    "totalCount": 10,
                    "totalPages": 1
                },
                "status": []
            },
            "result" : [
                {
                    "instanceNumber": 1,
                    "locationName" : "Zimbabwe",
                },
                {
                    "instanceNumber": 2,
                    "locationName" : "Kenya",
                }
            ]
        }

## List Studies [/brapi/v1/studies?programId={programId}]
Scope: CORE.
Status: IN DISCUSSION.

Get list of studies
 

### List of study summaries [GET]
+ Parameters
    + programId (optional, string, `1`) ... Program filter to only return studies associated with given program id.
+ Response 200 (application/json)

        {
            "metadata": {
                "pagination": {
                    "pageSize": 2,
                    "currentPage": 1,
                    "totalCount": 100,
                    "totalPages": 50
                },
                "status" : []
            },
            "result": [
                {
                    "studyDbId": 35,
                    "name": "Earlygenerationtesting",
                    "studyObjective": "Identifyblightresistantcultivars",
                    "type": "Trial",
                    "seasons": ["2005", "2008"],
                    "location": "Phillipines",
                    "startDate": "2015-06-01",
                    "endDate": "2015-12-31",
                    "programName": "RiceImprovementProgram",
                    "designType": "RCBD",
                    "keyContact": "Mr.PlantBreederB"
                }
               ,
                {
                    "studyDbId": 345,
                    "name": "Earlygenerationtesting",
                    "studyObjective": "Identifyblightresistantcultivars",
                    "type": "Nursery",
                    "seasons": ["2005", "2008"],
                    "location": "Phillipines",
                    "startDate": "2015-06-01",
                    "endDate": "2015-12-31",
                    "programName": "RiceImprovementProgram",
                    "designType": "RCBD",
                    "keyContact": "Mr.PlantBreederB"
                }
            ]
        }        

## Study Details [/brapi/v1/studies/{id}]
Scope: CORE.
Status: IN DISCUSSION.

Retrieve the details of the study required for field data collection

###### Response data types
|Variable|Datatype|Description|Required|  
|------|------|------|:-----:|
|studyDbId|Long|internal DB id ||
|studyPUI|string| Permanent identifier (e.g. URI, DOI, LSID) ||
|studyId|string|Unique name for study|Y|
|studyName|string|Human readable name||
|studyLocation|string| Location name or ID||
|studyObjective|string|Free text||
|studyProject|string|Scientific funding project||
|studySet|array of string|Different group of studies. For breeding network, scientific studies, etc...||
|studyPlatform|string|||
|startDate|string|ISO format "2006-07-03::10:00"||
|endDate|string|ISO format "2006-07-03::10:00"||
|designType|string|||
|keyContact|string|DEPRECATED?? Use contact list instead ?||
|contacts|List of contacts|each contact have a type, name and email||
|meteoStationCode|string|a meteo station code to search in the meteo network below||
|meteoStationNetwork|string|||
|studyHistory|string|free text||
|attributes|key value pair list|for all other information||
|seasons|List of string|List of all seasons. A single one for annual plants, multiple ones for perenial plants.||
|observationVariable|List|List of observation variable Ids and comments||
|germplasms|List| Germplasms Id, PUI and display name||

### Retrieve study details [GET]
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the experiment.
+ Response 200 (application/json)
    
        {
            "metadata" : "status": [],
                "pagination": {
                    "pageSize": 1,
                    "currentPage": 1,
                    "totalCount": 1,
                    "totalPages": 1
                },
            "result" : {
                    "studyDbId": 123,
                    "studyPUI": "http://phenome-fppn.fr/phenoarch/2014/1",
                    "studyId" : "BRP-03",
                    "studyName": "Blight Resistance in Phillipines",
                    "studyObjective": "Test blight resistant cultivars",
                    "studyType": "Trial",
                    "studyLocation": "Phillipines",
                    "studyProject": "Inovine",
                    "studySet": ["National Network", "Frost suceptibility network"],
                    "studyPlatform": "Phenome",
                    "startDate": "2015-06-01",
                    "endDate": "2015-12-31",
                    "programName": "RiceImprovementProgram",
                    "designType": "RCBD",
                    "keyContact": "Mr.PlantBreederA",
                    "contacts":
                    [
                        {
                            "type":"scientific coordinator",
                            "name":" John Doe",
                            "email": ""
                        },
                        {
                            "type":"manager",
                            "name":" Jane Doe",
                            "email": ""
                        }
                    ]
                    "meteoStationCode": "Anlez",
                    "meteoStationNetwork": "OpenWheatherMap",
                    "studyHistory": "Previous crop was pea, then maize",
                    "studyComments",
                    "attributes": 
                    [
                        {"att1" :"value"}, 
                        {"numPot" :"23"}
                    ], 
                    "seasons": ["2005", "2008"],
                    "observationVariables": [
                        {
                            "observationVariableId": "CO_321:0000045",
                            "observationVariableComment": "There might be a mistake with germplasms 456gh and 78ert"
                        },
                        {
                            "observationVariableId": "http://www.cropontology.org/rdf/CO_321:0000025",
                            "observationVariableComment": ""
                        }
                    ],
                    "germplasms":
                    [
                         {
                            "germplasmId": "01BEL084609",
                            "germplasmPUI": "http://www.crop-diversity.org/mgis/accession/01BEL084609",
                            "germplasmName": "Pahang"
                         }
                    ]
                    
                }
        }

## Layout [/brapi/v1/studies/{id}/layout]
Scope: CORE.
Status: SUGGESTED.

Retrieve the plot layout of the study with id {id}.

### Retrieve study details [GET]
+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the experiment.
+ Response 200 (application/json)
    
        {
            "metadata" : null,
            "result" : {
                "studyId": 1,
                "plotId": 11,
                "plotName": "ZIPA_68_Ibadan_2014",
                "blockNumber": 1,
                "rowNumber": 20,
                "columnNumber": 22,
                "replicate": 1,
                "type": "Check (or Test)",
                "germplasmId": 143,
                "germplasmName": "ZIPA_68"
            }
        }

# Group Phenotypes

API to retrieve data (phenotype, environment variables) from studies

## Phenotypes Dataset [/brapi/v1/phenotypes?observationUnitLevel=plot&studyDbId=876&studyPUI=&studyLocation=&studySet=&studyProject=&treatmentFactor=lowInput&germplasmGenus=&germplasmSubTaxa=&germplasmDbId&germplasmPUI=http://data.inra.fr/accession/234Col342&germplasmSpecies=Triticum&panel=diversitypanel1&collection=none&observationVariables=CO_321:000034,CO_321:000025&location=bergheim&season=2005,2006&pageSize={pageSize}&page={page}]
Scope: PHENOTYPING.
Status: IN DISCUSSION.

Use case: this section allows to get a dataset from multiple studies. It allows to integrate data from several databases.

###### Response data types
|Variable|Datatype|Description|Required|  
|------|------|------|:-----:|
|observationUnitDbId|Long|internal DB id ||
|observationUnitPUI|string|||
|studyId|string|Unique identifier for study|Y|
|studyDbId|Long|internal DB id (Primary Key)||
|studyLocation|string| Location name or ID|Y|
|studyPUI|string|Permanent identifier (e.g. URI, DOI, LSID)|Y|
|studyProject|string|||
|studySet|array of string|Different group of studies. For breeding network, scientific studies, etc...||
|studyPlatform|string|||
|observationUnitLevelTypes|string|Level type||
|observationUnitLevelLabels|string|Level identification/name||
|germplasmPUI|string|Permanent identifier (e.g. URI, DOI, LSID)||
|germplasmDbId|Long|internal DB id (Primary Key)||
|germplasmName|string| Display name for the germplasm. MCPD Name field||
|treatments|array of treatments|Array of the factor and modalities applied to this observation unit||
|attributes|array of key/value pair|||
|X,Y|string|||
|XLabel,YLabel|string|Example: X=row, Y = rootstock||
|observations|array of observations|||
|observations.instanceNumber|string| For data collection||
|observations.observationVariableId|string| ID or PUI (DOI, URI, LSID)||
|observations.season|string| Year or season, Phenotyping campain||
|observations.observationValue|string|||
|observations.observationTimeStamp|string|ISO format "2006-07-03::10:00"||
|observations.quality|string|||
|observations.collectionFacilityLabel|string| A given plant in a pot can be observed one week iin automated growth chamber and the other in the field.||
|observations.collector|string| Person or team who has made the observaiton||
                           

### Phenotypes [POST]
location : first find all the studies for your location search parameter then inject this list of studyIds 
We probably need a better handling of the list of possible values.
Rule of thumb : we can inject any list with less than a hundred Ids, like studyDbId. If we have more, let's try to use another filter, like species or panel for germplasm
In the response, note that trait ids can either be ontology ids or PUI. 

Consider using Json LD to handle locale, for V2.
instanceNumber : For data colleciton, nullable
season : phenotypingCampaignName
observationTimeStamp : Iso Standard
observationValue data type inferred from the ontology 

+ Parameters
    + germplasmPUI (optional, text, `http://data.inra.fr/accession/234Col342`) ... The name or synonym of external genebank accession identifier
    + germplasmDbId (optional, text, `986`) ... The name or synonym of external genebank accession identifier
    + germplasmSpecies (optional, text, `aestivum`) ... The name or synonym of genus or species ( merge with below ?)
    + germplasmGenus (optional, text, `Triticum, Hordeum`) ... The name or synonym of genus or species
    + germplasmSubTaxa (optional, text, `cv. Charger, subsp. aestivum`) ... The name or synonym of MCPD subTaxa. Exact Match, abreviations must be MCPD compliant (‘subsp.’ for 'subspecies'; ‘convar.’ for "convariety" ‘var.’ for variety; ‘f.’ for 'form'; ‘Group’ for ‘cultivar group’)
    + panel (optional, text, `breedingProgramPanel2011`) ... The name of a specific panel 
    + collection (optional, text, `BRCCollection_Wheat`) ... The name of a specific Collection    
    + observationVariables (optional, text, `CO_321:00000234`) ... The IDs of traits, could be ontology ID, database ID or PUI
    + studyDbId (optional, text, `2356`) ... The database ID / PK of the studies search parameter
    + studyPUI (optional, text, `2356`) ... The PUI the studie*s* search parameter
    + studyLocation (optional, text, `2356`) ... The Location  search parameter
    + studySet (optional, text, `2356`) ... The set (plateform, scientific network, scientific study) search parameter
    + studyProject (optional, text, `2356`) ... The project search parameter
    + season (optional, text, `2001`) ... The year or Phenotyping campaign of a multiannual study (trees, grape, ...)
    + treatmentFactor (optional, text, `water regimen`) ... The environment, cultural practice applied to the study subjects.
    + observationUnitLevel (optional, text, `plot`) ... The type of the observationUnit. Returns only the observaton unit of the specified type; the parent levels ID can be accessed through observationUnitStructure.
    + pageSize (optional, integer, `1000`) ... The size of the pages to be returned. Default is `1000`.
    + page (optional, integer, `10`) ... Which result page is requested
 
+ Response 200 (application/json)

        {
            "metadata": {
                "pagination": {
                    "pageSize": 10,
                    "currentPage": 1,
                    "totalCount": 10,
                    "totalPages": 1
                },
                "status": []
            },
            
            "result" : [
                {
                    "observationUnitDbId": 20,
                    "observationUnitPUI": "http://phenome-fppn.fr/maugio/bloc/12/2345",
                    "studyId": "RIGW1",
                    "studyDbId": 25,
                    "studyLocation": "Bergheim",
                    "studyPUI": "http://phenome-fppn.fr/phenoarch/2014/1",
                    "studyProject": "Inovine",
                    "studySet": ["National Network", "Frost suceptibility network"],
                    "studyPlatform": "Phenome",
                    "observationUnitLevelTypes" : [ "plant","plot", "bloc"],
                    "observationUnitLevelLabels": [ "1","26123", "1"],
                    "germplasmPUI": "http://inra.fr/vassal/41207Col0001E",
                    "germplasmDbId": 3425,
                    "germplasmName": "charger",
                    "treatments": 
                    [
                        {
                            "factor" : "water regimen" ,
                            "modality":"water deficit"
                        }
                    ],
                    "attributes": 
                    [
                        {"att1" :"value"}, 
                        {"numPot" :"23"}
                    ], 
                    "X" : "",
                    "Y" : "",
                    "XLabel" : "", 
                    "YLabel" : "",
                    "observations": 
                    [
                        {
                            "instanceNumber" : 1, 
                            "observationVariableId": "CO_321:0000045", 
                            //"observationVariableDbId": 35, 
                            "season": "2005", 
                            "observationValue" : "red", 
                            "observationTimeStamp": null, 
                            "quality": "reliability of the observation",
                            "collectionFacilityLabel":  "phenodyne",
                            "collector" : "John Doe and team"
                        },
                        {
                            "instanceNumber" : 1,
                            "observationVariableId": "http://www.cropontology.org/rdf/CO_321:0000025", 
                            //"observationVariableDbId": 35, 
                            "season": null,
                            "observationValue" :  32,
                            "observationTimeStamp": "2006-07-03::10:00",
                            "quality": "8",
                            "collectionFacilityLabel": null,
                            "collector" : "userURIOrName"
                        }
                    ]
                }
            ]
        }
    

## Phenotypes : metadata  [/brapi/v1/phenotypes/metadata?pageSize={pageSize}&page={page}]
Scope: PHENOTYPING.
Status: IN DISCUSSION.

Return the list of available metadata for all observationUnits without observation data. 

This is usefull to get the list to display choices in a drop down listbox of a web or tablet interface.


Keep in mind the possibility to merge phenotypes and phenotypes/metadata. In this case we would have phenotypes?observationData=true&....

Use case: this section allows to get metadata from multiple studies filtered by search criterions. It allows to integrate data from several databases.

Two possible approaches : get all data then filter to extract this metadata format. Or get All metadata from all sources.

Question : 
* is it necessary to keeep all the search parameters? Currently, gnpIS.Ephesis use case seems to be : get all metadata, then load into elasticsearch, filter through elastic search, then get filtered data through breeding api. See https://drive.draw.io/#G0B96GoP4splirdW1fcVRpQXhudG8
  -->  Suppress all parameters for now, we might reinject those from /phenotypes? in the future


###### Response data types
|Variable|Datatype|Description|Required|  
|------|------|------|:-----:|
|observationUnitDbId|Long|internal DB id ||
|observationUnitPUI|string|||
|studyId|string|Unique identifier for study|Y|
|studyDbId|Long|internal DB id (Primary Key)||
|studyLocation|string| Location name or ID|Y|
|studyPUI|string|Permanent identifier (e.g. URI, DOI, LSID)|Y|
|studyProject|string|||
|studySet|array of string|Different group of studies. For breeding network, scientific studies, etc...||
|studyPlatform|string|||
|observationUnitLevelTypes|string|Level type||
|observationUnitLevelLabels|string|Level identification/name||
|studyPlatform|string|||
|germplasmPUI|string|Permanent identifier (e.g. URI, DOI, LSID)||
|germplasmDbId|Long|internal DB id (Primary Key)||
|germplasmName|string| Display name for the germplasm. MCPD Name field||
|germplasmSpecies|string| MCPD  field||
|germplasmGenus|string| MCPD  field||
|germplasmSubTaxa|string|MCPD Field : Subtaxon can be used to store any additional taxonomic identifier. The following abbreviations are allowed: ‘subsp.’ (for subspecies); ‘convar.’ (for convariety); ‘var.’ (for variety); ‘f.’ (for form); ‘Group’ (for ‘cultivar group’).|
|germplasmPanel|array of string| ||
|germplasmcollection|array of string| ||
|treatments|array of treatments|Array of the factor and modalities applied to this observation unit||
|observations|array of observations|||
|observations.observationVariableId|string| ID or PUI (DOI, URI, LSID)||
|observations.season|string| Year or season, Phenotyping campain||

                           

### Phenotypes/metadata [GET]


location : first find all the studies for your location search parameter then inject this list of studyIds 
We probably need a better handling of the list of possible values.
Rule of thumb : we can inject any list with less than a hundred Ids, like studyDbId. If we have more, let's try to use another filter, like species or panel for germplasm
In the response, note that trait ids can either be ontology ids or PUI (DOI, URI, LSID). 

Consider using Json LD to handle locale, for V2.
instanceNumber : For data colleciton, nullable
season : phenotypingCampaignName
observationTimeStamp : Iso Standard
observationValue data type inferred from the ontology 


                           
+ Parameters
    + pageSize (optional, integer, `1000`) ... The size of the pages to be returned. Default is `1000`.
    + page (optional, integer, `10`) ... Which result page is requested

+ Response 200 (application/json)

           {
            "metadata": {
                "pagination": {
                    "pageSize": 10,
                    "currentPage": 1,
                    "totalCount": 10,
                    "totalPages": 1
                },
                "status": []
            },
            "result" : [
                {
                    "observationUnitDbId": 20,
                    "observationUnitPUI": "http://phenome-fppn.fr/maugio/bloc/12/2345",
                    "studyId": "RIGW1",
                    "studyName": "Riesling Genetic variation study",
                    "studyDbId": 25,
                    "studyPUI": "http://phenome-fppn.fr/phenoarch/2014/1",
                    "studyProject": "Inovine",
                    "studySet": ["National Network", "Frost suceptibility network"],
                    "studyPlatform": "Phenome",
                    "studyLocation": "Bergheim",
                    "germplasmPUI": "http://inra.fr/vassal/41207Col0001E",
                    "germplasmName": "charger", //display name
                    "germplasmSpecies": "vinifera",
                    "germplasmGenus" : "vitis",
                    "germplasmSubTaxa" : "cv. pinot noir",
                    "germplasmPanel":[
                       "breedwheat"
                    ],
                    "germplasmCollection":[
                        "FAO",
                        "Vassal"
                    ], 
                    "treatments" : [
                        {
                            "factor" : "water regimen" ,
                            "modality":"water deficit"
                        }
                    ]
                    "observationVariables": 
                    [
                        {
                            "observationVariableId": "CO_321:0000045", 
                            "season": "2005", "2008"
                        },
                        {
                            "observationVariableId": "http://www.cropontology.org/rdf/CO_321:0000025", 
                            "season": "2007"
                        }
                    ]
                }
            ]
        }


## Phenotypes hierarchical, study agregated, dataset  [/brapi/v1/phenotypes/hierarchical?observationUnitLevel=plot&studyDbId=876&treatmentFactor=lowInput&germplasmGenus=&germplasmDbId&germplasmPUI=http://data.inra.fr/accession/234Col342&germplasmSpecies=Triticum&panel=diversitypanel1&collection=none&observationVariables=CO_321:000034,CO_321:000025&location=bergheim&season=2005,2006&pageSize={pageSize}&page={page}]
Scope: PHENOTYPING.
Status: SUGGESTED.
### Phenotypes/hierarchical [GET]

A variation of the above return type with a factorisation of the study information from observationUnits to study.

location : first find all the studies for your location search parameter then inject this list of studyIds 
We probably need a better handling of the list of possible values.
In the response, note that trait ids can either be ontology ids or PUI. 

Consider using Json LD to handle locale, for V2.
instanceNumber : For data colleciton, nullable
season : phenotypingCampaignName
observationTimeStamp : Iso Standard
observationValue data type inferred from the ontology 


+ Parameters
    + germplasmPUI (optional, text, `http://data.inra.fr/accession/234Col342`) ... The name or synonym of external genebank accession identifier
    + germplasmDbId (optional, text, `986`) ... The name or synonym of external genebank accession identifier
    + germplasmSpecies (optional, text, `Aegilops taushi`) ... The name or synonym of genus or species ( merge with below ?)
    + germplasmGenus (optional, text, `Triticum, Hordeum`) ... The name or synonym of genus or species
    + panel (optional, text, `breedingProgramPanel2011`) ... The name of a specific panel 
    + collection (optional, text, `BRCCollection_Wheat`) ... The name of a specific Collection    
    + observationVariables (optional, text, `CO_321:00000234`) ... The IDs of traits, could be ontology ID, database ID or PUI
    + studyDbId (optional, text, `2356`) ... The database ID / PK of the studies search parameter
    + season (optional, text, `2001`) ... The year or Phenotyping campaign of a multiannual study (trees, grape, ...)
    + treatmentFactor (optional, text, `water regimen`) ... The environment, cultural practice applied to the study subjects.
    + observationUnitLevel (optional, text, `plot`) ... The type of the observationUnit. Returns only the observaton unit of the specified type; the parent levels ID can be accessed through observationUnitStructure.
    

+ Response 200 (application/json)

        {
            "metadata": {
                "pagination": {
                    "pageSize": 10,
                    "currentPage": 1,
                    "totalCount": 10,
                    "totalPages": 1
                },
                "status": []
            },
            
            "result" : [
                {
                    "studyId": "RIGW1",
                    "studyLocation": "Bergheim",
                    "studyPUI": "http://phenome-fppn.fr/maugio/2345",
                    "observationUnitLevelTypes" : [ "plant","plot", "bloc"],
                    "observationUnits" : 
                    [
                        {
                            "germplasmPUI": "http://inra.fr/vassal/41207Col0001E",
                            "germplasmDbId": 3425,
                            "germplasmDisplayName": "charger",
                            "observatioUnitDbId": 20,
                            "observationUnitPUI": "http://phenome-fppn.fr/maugio/bloc/12/2345",
                            "treatments": 
                            [
                                {
                                    "factor" : "water regimen" ,
                                    "modality":"water deficit"
                                },
                            ]
                            "observationUnitLevelLabels": [ "1","26123", "1"]
                            "attributes": 
                            [
                                {"att1" :"value"}, 
                                {"numPot" :"23"}
                            ] 
                            "X" : "",
                            "Y" : "",
                            "XLabel" : "", 
                            "YLabel" : "", 
                            "observations": 
                            [
                                {
                                    "instanceNumber" : 1,
                                    "observationVariableId": "CO_321:0000045", 
                                    "observationVariableDbId": 35, 
                                    "season": "2005", 
                                    "observationValue" : "", 
                                    "observationTimeStamp": null,
                                    "quality": "reliability of the observation",
                                    "collectionFacilityLabel": "phenodyne",
                                    "collector" : "userURIOrName"
                                },
                                {
                                    "instanceNumber" : 1,
                                    "observationVariableId": "http://www.cropontology.org/rdf/CO_321:0000025", 
                                    "observationVariableDbId": 35, 
                                    "season": null,
                                    "observationValue" :  32,
                                    "observationTimeStamp": "2006-07-03::10:00",
                                    "quality": "8",
                                    "collectionFacilityLabel": null,
                                    "collector" : "userURIOrName"
                                }
                            ]
                        }
                    ]
                }
            ]    
        }



# Group Traits

API to retrieve list of traits ans their associated variables


## Traits [/brapi/v1/traits]
Scope: CORE.
Status: IN DISCUSSION.

Call to retrieve a list of traits available in the system and their associated variables.

### List all traits [GET]
+ Response 200 (application/json)
    
        {
            "metadata" : {
                "pagination" : {    
                    "pageSize": 3, 
                    "currentPage": 1, 
                    "totalCount": 300, 
                    "totalPages": 100 
                }
                "status" : []
            },
        
            "result" : [
                {
                    "traitDbId": "123",
                    "traitId": "CO:123000007",
                    "name": "Plant Height",
                    "description": "Description of Plant Height",
                    "observationVariables": [
                        "CO_334:0100121", 
                        "CO_334:0100122", 
                        "CO_334:0100123" 
                    ],
                    "defaultValue": null
                },
                {
                    "traitDbId": "123",
                    "traitId": "CO_334:0100620",
                    name": "Carotenoid content",
                    "description": "Cassava storage root pulp carotenoid content",
                    "observationVariables": [
                        "CO_334:0100621", 
                        "CO_334:0100622", 
                        "CO_334:0100623" 
                    ],
                    "defaultValue": null
                },

            ]
        }


## Trait Detail [/brapi/v1/traits/{id}]
Scope: CORE.
Status: IN DISCUSSION.

Retrieve the variables associated to a trait 

+ Parameters
    + id (required, string, `464`) ... string containing id's of the traits

### Retrieve selected trait description [GET]

+ Response 200 (application/json)

        {
            "metadata": {
                "pagination": null,
                "status": []
            },
            "result": {
                "traitDbId": "123",
                "traitId": "CO:123000007",
                "name": "Plant Height",
                "description": "Description of Plant Height",
                "observationVariables": [
                    "CO_334:0100121", 
                    "CO_334:0100122", 
                    "CO_334:0100123" 
                ],
                "defaultValue": null
            }
        }
        
# Group Observation Variables

API to retrieve list and details of observation variables. An observation variable is composed by the unique combination of one Trait, one Method and one Scale.

## Data Types [/brapi/v1/variables/datatypes]

Call to retrieve a list of data types the variable can have.

### List Observation Variables data types [GET]
+ Response 200 (application/json)
        
        {
            "metadata": {
                "pagination": {
                    "pageSize": 10,
                    "currentPage": 1,
                    "totalCount": 6,
                    "totalPages": 1
                },
                "status": []
            },
            "result": ["Numeric", "Categorical", "Date", "Text", "Picture", "Boolean"]
        }  

## Variables [/brapi/v1/variables]
Scope: CORE.
Status: IN DISCUSSION.

Call to retrieve a list of variables available in the system.

### List all variables [GET]
+ Response 200 (application/json)
    
        {
            "metadata" : {
                "pagination" : {    
                    "pageSize": 3, 
                    "currentPage": 1, 
                    "totalCount": 300, 
                    "totalPages": 100 
                }
                "status" : []
            },
        
            "result" : [
                {
                    "observationVariableDbId": "123",
                    "observationVariableId": "CO_334:0100622",
                    "name": "Carotenoid content by spectro",
                    "trait": {
                        "traitDbId": "123",
                        "traitId": "CO_334:0100620",
                        "name": "Carotenoid content",
                        "description": "Cassava storage root pulp carotenoid content"
                    },
                    "measurementMethod": {
                        "methodId": "CO_334:0010320",
                        "name": "Visual Rating:total carotenoid by chart_method",
                        "description": "Assessment of the level of yellowness in cassava storage root pulp using the tc chart"
                    },
                    "scale": {
                        "scaleId": "CO_334:0100526",
                        "name": "ug/g",
                        "dataType": "Numeric",
                        "validValues": {
                           "min": "0",
                           "max": "100",
                           "categories": null
                        }
                    },
                    "defaultValue": null
                },
                {
                    "observationVariableDbId": "124",
                    "observationVariableId": "CO_334:0100621",
                    "name": "Carotenoid content by chart",
                    "trait": {
                        "traitDbId": "124",
                        "traitId": "CO_334:0100620",
                        "name": "Carotenoid content",
                        "description": "Cassava storage root pulp carotenoid content"
                    },                 
                    "measurementMethod": {
                        "methodId": "CO_334:0010319",
                        "name": "Visual Rating:total carotenoid by chart_method",
                        "description": "Assessment of the level of yellowness in cassava storage root pulp using the tc chart",
                    },
                    "scale": {
                        "scaleId": "CO_334:0100525",
                        "name": "8pt scale",
                        "dataType": "Categorical",
                        "validValues": {
                            "min": null,
                            "max": null,
                            "categories": [
                                "white", 
                                "light cream", 
                                "cream", 
                                "light yellow", 
                                "yellow", 
                                "deep yellow", 
                                "orange", 
                                "pink"
                            ]
                        }
                    },
                    "defaultValue": null
                },
                {
                    "observationVariableDbId": "125",
                    "observationVariableId": "CO_334:0100623",
                    "name": "Flowering Photo",
                    "trait": {
                        "traitDbId": "125",
                        "traitId": "CO_334:0100624",
                        "name": "Flowering time",
                        "description": "Time of the flowering"
                    },
                    "measurementMethod":{
                        "methodId": "CO_334:0010319",
                        "name": "Captured on camera",
                        "description": "Photo taken at flowering",
                    },
                    "scale": {
                        "scaleId": "CO_334:0100526",
                        "name": "Picture",
                        "dataType": "Binary",
                        "validValues": null
                    },
                    "defaultValue": null
                }
            ]
        }


## Variable Detail [/brapi/v1/variables/{id}]
Scope: CORE.
Status: IN DISCUSSION.

Retrieve variable details

+ Parameters
    + id (required, string, `CO_334:0100622`) ... string containing id's of the variables

### Retrieve selected variable description [GET]

+ Response 200 (application/json)

        {
            "metadata": {
                "pagination": null,
                "status": []
            },
            "result": {
                "traitDbId": "123",
                "observationVariableId": "CO_334:0100622",
                "name": "Carotenoid content by spectro",
                "trait": {
                    "traitId": "CO_334:0100620",
                    "name": "Estimation :Total Carotenoid Content_method",
                    "description": "Total extracted carotenoids in cassava storage root as estimated by spectrophotometer"
                },
                "measurementMethod": {
                    "methodId": "CO_334:0010320",
                    "name": "Visual Rating:total carotenoid by chart_method",
                    "description": "Assessment of the level of yellowness in cassava storage root pulp using the tc chart"
                },
                "scale": {
                    "scaleId": "CO_334:0100526",
                    "name": "ug/g",
                    "dataType": "Numeric",
                    "validValues": {
                        "min": "0",
                        "max": "100",
                        "categories": null
                    }
                },
                "defaultValue": null
            }
        }
        
        
# Group Genome Maps
Retrieving genetic or physical maps
- type: [Genetic | Physical]
- unit: [cM | Mb]
- linkageGroup: may be scaffold (i.e. linkageGroupCount may consist of chromosomes or scaffolds or a combination of the two)
- For genetic maps, map naming convention should tell whether it is a consensus or mapping population (name of population) map for genetic maps
- For physical maps, map naming convention should tell whether it is a reference genome (name of line) or pan-genome

## Genome Map  [/brapi/v1/maps?species={speciesId}&pageSize={pageSize}&page={page}&type={type}]

Get list of maps

do we need list of parents and specify mapping population?

### Get list of maps [GET]

+ Response 200 (application/json)

        {
            "metadata" : {
                "pagination" : {    
                    "pageSize": 30, 
                    "currentPage": 2, 
                    "totalCount": 40, 
                    "totalPages": 2 
                }
                "status" : []
            },
            "result": [ 
                {
                    "mapId": 1,
                    "name": "Some Map",
                    "species": "Some species",
                    "type": "Genetic",
                    "unit": "cM",
                    "publishedDate": "2008-04-16",
                    "markerCount": 1000,
                    "linkageGroupCount": 7,
                    "comments": "This map contains ..."
                }, 
                { 
                    "mapId": 2,
                    "name": "Some Other map",
                    "species": "Some Species",
                    "type": "Genetic",
                    "unit": "cM",
                    "publishedDate": "2009-01-12",
                    "markerCount": 1501,
                    "linkageGroupCount": 7,
                    "comments": "this is blah blah"
                } 
            ]
        }

## Genome Map Details [/brapi/v1/maps/{mapId}]

### Get map details [GET]

Provides the number of markers on each linkageGroup and the max position on the linkageGroup

+ Paramters
    + mapID (required)
    + Should we provide pagination?
    
+ Response 200 (application/json)
            
        {
            "metadata" : {
                "pagination" : {    
                    "pageSize": 30, 
                    "currentPage": 2, 
                    "totalCount": 40, 
                    "totalPages": 2 
                }
                "status" : []
            },
            "result": {
                "mapId": "id",
                "name": "Some map",
                "type": "Genetic",
                "unit": "cM",
                "linkageGroups": [
                    {
                        "linkageGroupId": 1,
                        "numberMarkers": 100000,
                        "maxPosition": 10000000
                    },
                    {
                        "linkageGroupId": 2,
                        "numberMarkers": 1247,
                        "maxPostion": 12347889
                    }
                ]
            }
        }

## Genome Map Data [/brapi/v1/maps/{mapId}/positions?linkageGroupIdList={linkageGroupId,linkageGroupId}&pageSize={pageSize}&pageNumber={pageNumber}]

### Get map data [GET]

markers ordered by linkageGroup and position

+ Parameters
   + mapId (required, integer, `6`) ... integer id of the map
   + linkageGroupIdList (optional, comma separated list of strings)

+ Response 200 (application/json)

        {
            "pagination" : { "pageSize": 30, "currentPage": 2, "totalCount": 40, "totalPages":2 },
            "markers": [ {
                "markerId": 1,
                "markerName": "marker1",
                "location": "1000",
                "linkageGroup": "1A"
            }, {
                "markerId": 2,
                "markerName": "marker2",
                "location": "1001",
                "linkageGroup": "1A"
            }
            ]
        }
## Genome Map Data by range on linkageGroup [/brapi/v1/maps/{mapId}/positions/{linkageGroupId}?min={min}&max={max}&pageSize={pageSize}&pageNumber={pageNumber}]

### Get map data by range on linkageGroup [GET]

markers ordered by linkageGroup and position

+ Parameters
   + mapId (required, integer, `6`) ... integer id of the map
   + linkageGroupId (required, string)
   + min (optional) ... minimum position on linkage group
   + max (optional) ... maximumn position on linkage group

+ Response 200 (application/json)

        {
            "pagination" : { "pageSize": 30, "currentPage": 2, "totalCount": 40, "totalPages":2 },
            "markers": [ {
                "markerId": 1,
                "markerName": "marker1",
                "location": "1000"
            }, {
                "markerId": 2,
                "markerName": "marker2",
                "location": "1001"
            }
            ]
        }


# Group Field Data Collection
API calls and data structures required to enable the basic use case of collectiong measurement data from the fields using handheld devices.

## Observation Levels [/brapi/v1/observationLevels]

Call to retrieve the list of supported observation levels. 
Observation levels indicate the granularity level at which the measurements are taken.
The values are used to supply the `observationLevel` parameter in the "get observation units" call.

### List observation levels [GET]

+ Response 200 (application/json)
        
        {
            "metadata" : {
                "pagination": {
                    "pageSize": 10,
                    "currentPage": 1,
                    "totalCount": 2,
                    "totalPages": 1
                },
                "status": []
            },
            "result" : ["plant", "plot"]
        }

## Collection [/brapi/v1/study/{studyId}/observationunits?observationLevel={observationLevel}&studyInstance={studyInstance}]

The main API call for field data collection, to retrieve all the observation units within a study.

### Get all observation units [GET]

+ Parameters
    + observationLevel (required, string, `plot`) ... The granularity level of observation units. 
      Either `plotNumber` or `plantNumber` fields will be relavant depending on whether granularity is plot or plant respectively.
    + studyInstance (optional, number, `1`) ... Study instance to filter by, in case of studied with multiple instances.
+ Response 200 (application/json)

        {
            "metadata" : null,
            "result" : [ 
                {
                    "observationUnitDbId": "abc-123",
                    "germplasmDbId": "1",
                    "germplasmName": "IR-8",
                    "pedigree": "IR-8-FP/IR-8-MP",
                    "entryNumber": "1",
                    "entryType": "Test entry",
                    "plotNumber": "1",
                    "plantNumber" : "0",
                    "X" : "1",
                    "Y" : "1",
                    "replicationNumber": "1",
                    "studyInstance": "1",
                    "observations": [
                        {
                            "observationDbId": 1,
                            "observationVariableId": 18020,
                            "observationVariableName": "Plant_height",
                            "collector" : "Mr. Technician",
                            "observationTimeStamp" : "2015-06-16T00:53:26Z",
                            "observationValue": null
                        },
                        { 
                            "observationDbId": 2,
                            "observationVariableId": 51496,
                            "observationVariableName": "GW100_g",
                            "collector" : "Mr. Technician",
                            "observationTimeStamp" : "2015-06-16T00:53:26Z",
                            "observationValue": null
                        }
                    ]
                },
                {
                    "observatioUnitDbId": "abc-456",
                    "germplasmDbId": "2",
                    "germplasmName": "IR-9",
                    "pedigree": "IR-9-FP/IR-9-MP",
                    "enrtyNumber": "2",
                    "entryType": "Check entry",
                    "plotNumber": "2",
                    "plantNumber" : "0",
                    "X" : "1",
                    "Y" : "2",
                    "replicationNumber": "1",
                    "studyInstance": "1",
                    "observation": [
                        {
                            "observationDbId": 3,
                            "observationVariableId": 18020,
                            "observationVariableName": "Plant_height",
                            "collector" : "Mr. Technician",
                            "observationTimeStamp" : "2015-06-16T00:53:26Z",
                            "observationValue": null
                        },
                        {   
                            "observationDbId": 4,
                            "observationVariableId": 51496,
                            "observationVariableName": "GW100_g",
                            "collector" : "Mr. Technician",
                            "observationTimeStamp" : "2015-06-16T00:53:26Z",
                            "observationValue": null
                        }
                    ]
                }
            ]
        }

### Save Measurements [PUT]
Call to invoke for saving the measurements captured for all the observation units.

+ Parameters
    + observationLevel (required, string, `plot`) ... The granularity level of observation units.
+ Request (application/json)

        {
            "metadata" : null,
            "result" : [
                {
                    "observatioUnitDbId": "abc-123",
                    "germplasmDbId": "1",
                    "germplasmName": "IR-8",
                    "pedigree": "IR-8-FP/IR-8-MP",
                    "enrtyNumber": "1",
                    "entryType": "Test entry",
                    "plotNumber": "1",
                    "plantNumber" : "0",
                    "X" : "1",
                    "Y" : "1",
                    "replicationNumber": "1",
                    "studyInstance": "1",
                    "observation": [
                        {
                            "observationDbId": 1,
                            "observationVariableId": 18020,
                            "observationVariableName": "Plant_height",
                            "collector" : "Mr. Technician",
                            "observationTimeStamp" : "2015-06-16T00:53:26Z",
                            "observationValue": "11"
                        },
                        {   
                            "observationDbId": 2,
                            "observationVariableId": 51496,
                            "observationVariableName": "GW100_g",
                            "collector" : "Mr. Technician",
                            "observationTimeStamp" : "2015-06-16T00:53:26Z",
                            "observationValue": "111"
                        }
                    ]
                },
                {
                    "observatioUnitDbId": "abc-456",
                    "germplasmDbId": "2",
                    "germplasmName": "IR-9",
                    "pedigree": "IR-9-FP/IR-9-MP",
                    "enrtyNumber": "2",
                    "entryType": "Check entry",
                    "plotNumber": "2",
                    "plantNumber" : "0",
                    "X" : "1",
                    "Y" : "2",
                    "replicationNumber": "1",
                    "studyInstance": "1",
                    "observation": [
                        {
                            "observationDbId": 3,
                            "observationVariableId": 18020,
                            "observationVariableName": "Plant_height",
                            "collector" : "Mr. Technician",
                            "observationTimeStamp" : "2015-06-16T00:53:26Z",
                            "observationValue": "22"
                        },
                        {   
                            "observationDbId": 4,
                            "observationVariableId": 51496,
                            "observationVariableName": "GW100_g",
                            "collector" : "Mr. Technician",
                            "observationTimeStamp" : "2015-06-16T00:53:26Z",
                            "observationValue": "222"
                        }
                    ]
                }
            ]
        }

+ Response 200 (application/json)

+ Response 500 (application/json)

        {
            "metadata": {
                "status": {
                    "code": "Error",
                    "message": "Could not update observation values. Invalid data."
                }
            }
        }


# Group Observation Set

API calls for retrieving observation sets and measurement data.

## Observation Sets [/brapi/v1/observationSets/{id}?name=""&species=""&program=""&year=""&location=""&observationSetType=""&observationUnitType=""]

### List all observation sets [GET]

+ Parameters
    + id (optional,numeric) - unique identifier for the observation set
    + name (optional,string) - human-readable name for the observation set
    + species (optional,string) - species. This could be a set of comma-separated values.
    + program (optional,string) - the program the observation set belongs to. This could be a set of comma-separated values.
    + year (optional,numeric) - the year the observation set was created. This could be a set of comma-separated values.
    + location (optional,string) - location
    + observationSetType (optional,string) - the type of the observation set.
    + observationUnitType (optional,string) - the type of observation unit under the observation set to be returned. This could be entry, plot,etc.
+ Response 200 (application/json)

        {
            "metadata": {},
            "observationSets": {
                "observationSetId": "11",
                "observationSetUri": "x.x.x/v1/observationSets/11",
                "observationSetName": "Human readable name",
                "species": [
                    {
                        "speciesName": "speciesName",
                        "speciesUri": "x.x.x/v1/species/1"
                    }
                ],
                "program": [
                    {
                        "programName": "programName",
                        "programUri": "x.x.x/v1/programs/1"
                    }
                ],
                "year": [
                    "2013",
                    "2014",
                    "2015"
                ],
                "location": [
                    {
                        "locationName": "locationName",
                        "locationNameUri": "x.x.x/v1/locations/1"
                    }
                ],
                "observationSetType": "controlled vocabulary",
                "metadata": {
                    "description": "this is a parent list",
                    "author": "URL to user"
                },
                "observationData": [
                    {
                        "HARVEST_DATE": {
                            "observationVariableUri": "x.x.x/v1/observationVariables/123",
                            "value": "2015-06-16",
                            "timestamp": "",
                            "remarks": ""
                        }
                    }
                ],
                "childrenDatasets": [
                    {
                        "observationUnitId": "17778",
                        "observationUnitTypeUri": "x.x.x/v1/observationUnitTypes/123",
                        "parentObservationSetUri": "x.x.x/v1/observationSets/11",
                        "parentObservationUnitUri": null,
                        "germplasmId": "x.x.x/v1/germplasm/145",
                        "metadata": {
                            "entryName": "IR 64",
                            "entryNumber": "1"
                        },
                        "observationData": [
                            {
                                "PLANT_HEIGHT_AVG": {
                                    "observationVariableUri": "x.x.x/v1/observationVariables/123",
                                    "value": "xxx",
                                    "timestamp": "",
                                    "remarks": ""
                                }
                            }
                        ]
                    },
                    {
                        "observationUnitId": "17779",
                        "observationUnitTypeUri": "x.x.x/v1/observationUnitTypes/15",
                        "parentObservationUnitUri": "x.x.x/v1/observationSets/17778",
                        "germplasmId": "x.x.x/v1/germplasm/145",
                        "metadata": {
                            "plotNo": "1",
                            "rep": "1"
                        },
                        "observationData": [
                            {
                                "PLANT_HEIGHT_1": {
                                    "observationVariableUri": "x.x.x/v1/observationVariables/129",
                                    "observationUnitTypeUri": "x.x.x/v1/observationUnitTypes/15",
                                    "value": "xxx",
                                    "timestamp": "",
                                    "remarks": ""
                                }
                            }
                        ]
                    },
                    {
                        "observationUnitId": "17780",
                        "parentObservationUnitUri": "x.x.x/v1/observationSets/17778",
                        "germplasmId": "x.x.x/v1/germplasm/145",
                        "metadata": {
                            "plotNo": "1",
                            "rep": "2"
                        },
                        "observationData": [
                            {
                                "PLANT_HEIGHT_2": {
                                    "observationVariableUri": "x.x.x/v1/observationVariables/129",
                                    "observationUnitTypeUri": "x.x.x/v1/observationUnitTypes/15",
                                    "value": "xxx",
                                    "timestamp": "",
                                    "remarks": ""
                                }
                            }
                        ]
                    }
                ]
            }
        }
        
        
# Group Locations

## List [/brapi/v1/locations]

Get a list of locations.

* The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.
* `altitude` is in meters.

**Note**: Consider revising to describe polygon lat/lan points and check if adopting http://geojson.org/ is worth doing for v1.

### List locations [GET]

+ Response 200 (application/json)
        
        {
            "metadata": {
                "pageNumber": 1,
                "pageSize": 2,
                "totalCount": 100,
                "totalPages": 50
            },
            "result": [
                {
                    "locationDbId": 1,
                    "name": "Ibadan",
                    "countryCode": "NGA",
                    "countryName": "Nigeria",
                    "latitude": -21.5,
                    "longitude": 165.5,
                    "altitude": 12,
                    "attributes": 
                    [
                        {"annual mean rain" :"value"}, 
                        {"soil description" :"23"}
                    ]
                },
                {
                    "locationDbId": 2,
                    "name": "Goa",
                    "countryCode": "IND",
                    "countryName": "India",
                    "latitude": 28.36,
                    "longitude": 77.12,
                    "altitude": 10,
                    "attributes": []
                }
            ]
        }
        